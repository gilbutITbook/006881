** 실습 주의사항

1) IP 주소, 패스워드 등은 실습 환경에 맞게 바꿔 주셔야 합니다.

2) 에러가 발생하는 경우, 설정 값들이 확인해 주세요.
   오픈스택이 지속적으로 업데이트되기 때문에 업데이트 버전에 따라 조금씩 다를 수 있습니다.
   이러한 부분은 구글과 같은 검색엔진을 사용하거나 오픈스택 공식 사이트를 참조해주세요.
   (책의 7, 8장에 자세히 안내되어 있습니다)

3) 실습할 때 controller 노드인지 compute 노드인지 잘 확인합니다.



6장 CentOS에서 매뉴얼을 이용해 서비스가 가능한 오픈스택 설치하기

<환경 설정>

<네트워크 설정하기>

[root@controller ~]# ifconfig

[root@controller ~]# ip addr show

[root@controller ~]# yum install net-tools

[root@controller ~]# ifconfig

[root@controller ~]# cd /etc/sysconfig/network-scripts/

[root@controller network-scripts]# vi ifcfg-eth1
TYPE="Ethernet"
BOOTPROTO="none"
DEFROUTE="yes"
PEERDNS="yes"
PEERROUTES="yes"
IPV4_FAILURE_FATAL="no"
IPV6INIT="yes"
IPV6_AUTOCONF="yes"
IPV6_DEFROUTE="yes"
IPV6_PEERDNS="yes"
IPV6_PEERROUTES="yes"
IPV6_FAILURE_FATAL="no"
NAME="eth1"
UUID="4185f206-322b-49bd-baf3-30bca84d7195"
DEVICE="eth1"
ONBOOT="yes"
-------------------------

[root@controller network-scripts]# systemctl restart NetworkManager 또는

[root@controller network-scripts]# systemctl restart network

[root@controller network-scripts]# ifconfig

[root@controller ~]# vi /etc/hosts
127.0.0.1   localhost
::1         localhost

192.168.56.101 controller
192.168.56.102 compute
-------------------------

[root@compute ~]# ifconfig

[root@compute ~]# yum install net-tools

[root@compute ~]# ifconfig

[root@compute ~]# cd /etc/sysconfig/network-scripts/

[root@compute network-scripts]# vi ifcfg-eth1
TYPE="Ethernet"
BOOTPROTO="none"
DEFROUTE="yes"
PEERDNS="yes"
PEERROUTES="yes"
IPV4_FAILURE_FATAL="no"
IPV6INIT="yes"
IPV6_AUTOCONF="yes"
IPV6_DEFROUTE="yes"
IPV6_PEERDNS="yes"
IPV6_PEERROUTES="yes"
IPV6_FAILURE_FATAL="no"
NAME="eth1"
UUID="4185f206-322b-49bd-baf3-30bca84d7195"
DEVICE="eth1"
ONBOOT="yes"
-------------------------

[root@compute network-scripts]# systemctl restart NetworkManager
 
[root@compute network-scripts]# systemctl restart network

[root@compute network-scripts]# ifconfig

[root@compute network-scripts]# cd

[root@compute ~]# vi /etc/hosts
127.0.0.1   localhost
::1         localhost

192.168.56.101 controller
192.168.56.102 compute
-------------------------

[root@compute ~]# ping controller

[root@compute ~]# ping 8.8.8.8


<네트워크 타임 서비스>

[root@controller ~]# yum install chrony

[root@controller ~]# vi /etc/chrony.conf 
# Use public servers from the pool.ntp.org project.
# Please consider joining the pool (http://www.pool.ntp.org/join.html).
#server 0.centos.pool.ntp.org iburst
#server 1.centos.pool.ntp.org iburst
#server 2.centos.pool.ntp.org iburst
#server 3.centos.pool.ntp.org iburst

server 0.pool.ntp.org iburst
server 1.pool.ntp.org iburst
server 2.pool.ntp.org iburst
server 3.pool.ntp.org iburst
…

# Allow NTP client access from local network.
allow 0/0
-------------------------

[root@controller ~]# ping centos.pool.ntp.org  

[root@controller ~]# ping pool.ntp.org

[root@controller ~]# systemctl enable chronyd.service

[root@controller ~]# systemctl start chronyd.service

[root@controller ~]# systemctl status chronyd.service

[root@controller ~]# chronyc sources



[root@compute ~]# yum install chrony

[root@compute ~]# vi /etc/chrony.conf 

# Use public servers from the pool.ntp.org project.
# Please consider joining the pool (http://www.pool.ntp.org/join.html).
#server 0.centos.pool.ntp.org iburst
#server 1.centos.pool.ntp.org iburst
#server 2.centos.pool.ntp.org iburst
#server 3.centos.pool.ntp.org iburst

server 192.168.56.101 iburst
-------------------------

[root@compute ~]# systemctl enable chronyd.service

[root@compute ~]# systemctl start chronyd.service

[root@compute ~]# systemctl status chronyd.service

[root@compute ~]# chronyc sources


<오픈스택 패키지>

[root@controller ~]# yum install centos-release-openstack-mitaka

[root@controller ~]# yum upgrade

[root@controller ~]# reboot

[root@controller ~]# yum install python-openstackclient

[root@controller ~]# yum install openstack-selinux


<SQL 데이터베이스>

[root@controller ~]# yum install mariadb mariadb-server python2-PyMySQL

[root@controller ~]# vi /etc/my.cnf.d/openstack.cnf 
[mysqld]
bind-address = 192.168.56.101
default-storage-engine = innodb
innodb_file_per_table
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8
-------------------------

[root@controller ~]# systemctl enable mariadb.service

[root@controller ~]# systemctl start mariadb.service

[root@controller ~]# systemctl status mariadb.service

[root@controller ~]# mysql_secure_installation


<메시지 큐>

[root@controller ~]# yum install rabbitmq-server

[root@controller ~]# systemctl enable rabbitmq-server.service

[root@controller ~]# systemctl start rabbitmq-server.service

[root@controller ~]# systemctl status rabbitmq-server.service

[root@controller ~]# rabbitmqctl add_user openstack rabbitpass

[root@controller ~]# rabbitmqctl set_permissions openstack ".*" ".*" ".*"


<캐시>

[root@controller ~]# yum install memcached python-memcached

[root@controller ~]# systemctl enable memcached.service

[root@controller ~]# systemctl start memcached.service

[root@controller ~]# systemctl status memcached.service



<인증 서비스>

<설치 및 환경 설정>
[root@controller ~]# mysql -u root -popenstack
MariaDB [(none)]> CREATE DATABASE keystone;
MariaDB [(none)]> GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY 'keystonedbpass';
MariaDB [(none)]> GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' IDENTIFIED BY 'keystonedbpass';
MariaDB [(none)]> exit;

[root@controller ~]# yum install openstack-keystone httpd mod_wsgi

[root@controller ~]# openssl rand -hex 10

[root@controller ~]# vi /etc/keystone/keystone.conf 
[DEFAULT]
admin_token = cb058a6efbeb03ca825f
…
[database]
connection = mysql+pymysql://keystone:keystonedbpass@192.168.56.101/keystone
-------------------------

[root@controller ~]# su -s /bin/sh -c "keystone-manage db_sync" keystone

[root@controller ~]# keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone

[root@controller ~]# vi /etc/httpd/conf/httpd.conf 
…
ServerRoot "/etc/httpd"
Listen 80
Include conf.modules.d/*.conf
User apache
Group apache
ServerAdmin root@localhost
…
ServerName 192.168.56.101
…
EnableSendfile on
IncludeOptional conf.d/*.conf
-------------------------


[root@controller ~]# vi /etc/httpd/conf.d/wsgi-keystone.conf
Listen 5000
Listen 35357

<VirtualHost *:5000>
    WSGIDaemonProcess keystone-public processes=5 threads=1 user=keystone group=keystone display-name=%{GROUP}
    WSGIProcessGroup keystone-public
    WSGIScriptAlias / /usr/bin/keystone-wsgi-public
    WSGIApplicationGroup %{GLOBAL}
    WSGIPassAuthorization On
    ErrorLogFormat "%{cu}t %M"
    ErrorLog /var/log/httpd/keystone-error.log
    CustomLog /var/log/httpd/keystone-access.log combined

    <Directory /usr/bin>
        Require all granted
    </Directory>
</VirtualHost>

<VirtualHost *:35357>
    WSGIDaemonProcess keystone-admin processes=5 threads=1 user=keystone group=keystone display-name=%{GROUP}
    WSGIProcessGroup keystone-admin
    WSGIScriptAlias / /usr/bin/keystone-wsgi-admin
    WSGIApplicationGroup %{GLOBAL}
    WSGIPassAuthorization On
    ErrorLogFormat "%{cu}t %M"
    ErrorLog /var/log/httpd/keystone-error.log
    CustomLog /var/log/httpd/keystone-access.log combined

    <Directory /usr/bin>
        Require all granted
    </Directory>
</VirtualHost>
-------------------------


[root@controller ~]# systemctl enable httpd.service

[root@controller ~]# systemctl start httpd.service

[root@controller ~]# systemctl status httpd.service


<서비스 및 앤드포인트 생성>

[root@controller ~]# cat /etc/keystone/keystone.conf | grep admin_token

[root@controller ~]# export OS_TOKEN=cb058a6efbeb03ca825f 

[root@controller ~]# export OS_URL=http://192.168.56.101:35357/v3

[root@controller ~]# export OS_IDENTITY_API_VERSION=3


[root@controller ~]# openstack service create --name keystone --description "OpenStack Identity" identity

[root@controller ~]# openstack endpoint create --region RegionOne identity public http://192.168.56.101:5000/v3

[root@controller ~]# openstack endpoint create --region RegionOne identity internal http://192.168.56.101:5000/v3

[root@controller ~]# openstack endpoint create --region RegionOne identity admin http://192.168.56.101:35357/v3


<도메인, 프로젝트, 사용자, 롤 생성>

[root@controller ~]# openstack domain create --description "Default Domain" default

[root@controller ~]# openstack project create --domain default --description "Admin Project" admin

[root@controller ~]# openstack user create --domain default --password-prompt admin

[root@controller ~]# openstack role create admin

[root@controller ~]# openstack role add --project admin --user admin admin

[root@controller ~]# openstack project create --domain default --description "Service Project" service

[root@controller ~]# openstack project create --domain default --description "Demo Project" demo

[root@controller ~]# openstack user create --domain default --password-prompt demo

[root@controller ~]# openstack role create user

[root@controller ~]# openstack role add --project demo --user demo user


<테스트>

[root@controller ~]# export

[root@controller ~]# unset OS_IDENTITY_API_VERSION OS_TOKEN OS_URL

[root@controller ~]# vi adminrc 
export OS_PROJECT_DOMAIN_NAME=default
export OS_USER_DOMAIN_NAME=default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=openstack
export OS_AUTH_URL=http://192.168.56.101:35357/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
-------------------------

[root@controller ~]# vi demorc 
export OS_PROJECT_DOMAIN_NAME=default
export OS_USER_DOMAIN_NAME=default
export OS_PROJECT_NAME=demo
export OS_USERNAME=demo
export OS_PASSWORD=openstack
export OS_AUTH_URL=http://192.168.56.101:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
-------------------------

[root@controller ~]# . adminrc 

[root@controller ~]# openstack token issue


<이미지 서비스>

<설치 및 환경 설정>

[root@controller ~]# mysql -u root -popenstack
MariaDB [(none)]> CREATE DATABASE glance;
MariaDB [(none)]> GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' IDENTIFIED BY 'glancedbpass';
MariaDB [(none)]> GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' IDENTIFIED BY 'glancedbpass';
MariaDB [(none)]> exit;

[root@controller ~]# cat adminrc 

[root@controller ~]# . adminrc 

[root@controller ~]# openstack user create --domain default --password-prompt glance

[root@controller ~]# openstack role add --project service --user glance admin

[root@controller ~]# openstack service create --name glance --description "OpenStack Image" image

[root@controller ~]# openstack endpoint create --region RegionOne image public http://192.168.56.101:9292

[root@controller ~]# openstack endpoint create --region RegionOne image internal http://192.168.56.101:9292

[root@controller ~]# openstack endpoint create --region RegionOne image admin http://192.168.56.101:9292

[root@controller ~]# yum install openstack-glance



[root@controller ~]# vi /etc/glance/glance-api.conf  
[DEFAULT]
…
[database]
connection = mysql+pymysql://glance:glancedbpass@192.168.56.101/glance

[glance_store]
stores = file,http
default_store = file
filesystem_store_datadir = /var/lib/glance/images/
…
[keystone_authtoken]
auth_uri = http://192.168.56.101:5000
auth_url = http://192.168.56.101:35357
memcached_servers = 192.168.56.101:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = glance
password = glancepass
…
[paste_deploy]
flavor = keystone
-------------------------

[root@controller ~]# vi /etc/glance/glance-registry.conf 
[DEFAULT]
…
[database]
connection = mysql+pymysql://glance:glancedbpass@192.168.56.101/glance
…
[keystone_authtoken]
auth_uri = http://192.168.56.101:5000
auth_url = http://192.168.56.101:35357
memcached_servers = 192.168.56.101:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = glance
password = glancepass
…
[paste_deploy]
flavor = keystone
-------------------------

[root@controller ~]# su -s /bin/sh -c "glance-manage db_sync" glance

[root@controller ~]# systemctl enable openstack-glance-api.service openstack-glance-registry.service

[root@controller ~]# systemctl start openstack-glance-api.service openstack-glance-registry.service

[root@controller ~]# systemctl status openstack-glance-api.service openstack-glance-registry.service


<테스트>

[root@controller ~]# cat adminrc 

[root@controller ~]# . adminrc

[root@controller ~]# wget http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img

[root@controller ~]# yum install wget -y

[root@controller ~]# wget http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img

[root@controller ~]# openstack image create "cirros" --file cirros-0.3.4-x86_64-disk.img --disk-format qcow2 --container-format bare --public

[root@controller ~]# openstack image list


<컴퓨트 서비스>

<컨트롤러 노드 설치 및 환경 설정>

[root@controller ~]# mysql -u root -popenstack
MariaDB [(none)]> CREATE DATABASE nova_api;
MariaDB [(none)]> CREATE DATABASE nova;
MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' IDENTIFIED BY 'novadbpass';
MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' IDENTIFIED BY 'novadbpass';
MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' IDENTIFIED BY 'novadbpass';
MariaDB [(none)]> GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' IDENTIFIED BY 'novadbpass';
MariaDB [(none)]> exit;

[root@controller ~]# cat adminrc 

[root@controller ~]# . adminrc

[root@controller ~]# openstack user create --domain default --password-prompt nova

[root@controller ~]# openstack role add --project service --user nova admin

[root@controller ~]# openstack service create --name nova --description "OpenStack Compute" compute

[root@controller ~]# openstack endpoint create --region RegionOne compute public http://192.168.56.101:8774/v2.1/%\(tenant_id\)s

[root@controller ~]# openstack endpoint create --region RegionOne compute internal http://192.168.56.101:8774/v2.1/%\(tenant_id\)s

[root@controller ~]# openstack endpoint create --region RegionOne compute admin http://192.168.56.101:8774/v2.1/%\(tenant_id\)s

[root@controller ~]# yum install openstack-nova-api openstack-nova-conductor openstack-nova-console openstack-nova-novncproxy openstack-nova-scheduler

[root@controller ~]# vi /etc/nova/nova.conf
[DEFAULT]
enabled_apis = osapi_compute,metadata
rpc_backend = rabbit
auth_strategy = keystone
my_ip = 192.168.56.101
use_neutron = True
firewall_driver = nova.virt.firewall.NoopFirewallDriver

[api_database]
connection = mysql+pymysql://nova:novadbpass@192.168.56.101/nova_api

[database]
connection = mysql+pymysql://nova:novadbpass@192.168.56.101/nova

[glance]
api_servers = http://192.168.56.101:9292

[keystone_authtoken]
auth_uri = http://192.168.56.101:5000
auth_url = http://192.168.56.101:35357
memcached_servers = 192.168.56.101:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = nova
password = novapass

[oslo_concurrency]
lock_path = /var/lib/nova/tmp

[oslo_messaging_rabbit]
rabbit_host = 192.168.56.101
rabbit_userid = openstack
rabbit_password = rabbitpass

[vnc]
vncserver_listen = $my_ip
vncserver_proxyclient_address = $my_ip
-------------------------

[root@controller ~]# su -s /bin/sh -c "nova-manage api_db sync" nova

[root@controller ~]# su -s /bin/sh -c "nova-manage db sync" nova

[root@controller ~]# systemctl enable openstack-nova-api.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service

[root@controller ~]# systemctl start openstack-nova-api.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service

[root@controller ~]# systemctl status openstack-nova-api.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service


<컴퓨트 노드 설치 및 환경 설정>

[root@compute ~]# yum install openstack-nova-compute

[root@compute ~]# egrep -c '(vmx|svm)' /proc/cpuinfo


[root@compute ~]# vi /etc/nova/nova.conf 
[DEFAULT]
rpc_backend = rabbit
auth_strategy = keystone
my_ip = 192.168.56.102
use_neutron = True
firewall_driver = nova.virt.firewall.NoopFirewallDriver

[glance]
api_servers = http://192.168.56.101:9292

[keystone_authtoken]
auth_uri = http://192.168.56.101:5000
auth_url = http://192.168.56.101:35357
memcached_servers = 192.168.56.101:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = nova
password = novapass

[libvirt]            #egrep ?c ‘(vmx|svm)’ /proc/cpuinfo를 실행해서 
virt_type = kvm    #나온 결괏값이 0이라면 qemu를 입력합니다.

[oslo_concurrency]
lock_path = /var/lib/nova/tmp

[oslo_messaging_rabbit]
rabbit_host = 192.168.56.101
rabbit_userid = openstack
rabbit_password = rabbitpass

[vnc]
enabled = True
vncserver_listen = 0.0.0.0
vncserver_proxyclient_address = $my_ip
novncproxy_base_url = http://192.168.56.101:6080/vnc_auto.html
-------------------------

[root@compute ~]# systemctl enable libvirtd.service openstack-nova-compute.service

[root@compute ~]# systemctl start libvirtd.service openstack-nova-compute.service

[root@compute nova]# systemctl status libvirtd.service openstack-nova-compute.service

[root@compute ~]# cd /var/log/nova 

[root@compute nova]# tail -f nova-compute.log 

[root@controller ~]# iptables -L

[root@controller ~]# iptables -A IN_public_allow -p tcp -m tcp --dport 5672 -m conntrack --ctstate NEW -j ACCEPT

[root@controller ~]# iptables -L

[root@compute nova]# tail -f nova-compute.log 

[root@compute ~]# systemctl status openstack-nova-compute.service


<팁>CentOS의 방화벽 서비스 firewalld와 iptables
[root@controller etc]# ps -ef | grep firewalld

[root@controller etc]# systemctl stop firewalld

[root@controller etc]# systemctl mask firewalld

[root@controller etc]# cd

[root@controller ~]# yum install iptables-services

[root@controller ~]# systemctl enable iptables

[root@controller ~]# systemctl start iptables

[root@controller ~]# systemctl status iptables

[root@controller ~]# iptables -L

[root@controller ~]# vi /etc/sysconfig/iptables

# sample configuration for iptables service
# you can edit this manually or use system-config-firewall
# please do not ask us to add additional ports/services to this default configuration
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 5672 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
COMMIT
-------------------------

[root@controller ~]# systemctl restart iptables

[root@controller ~]# systemctl status iptables

[root@controller ~]# iptables -L
</팁>

<테스트>

[root@controller ~]# cat adminrc 

[root@controller ~]# . adminrc

[root@controller ~]# openstack compute service list


<네트워킹 서비스>

<컨트롤러 노드 설치 및 환경 설정>

[root@controller ~]# mysql -u root -popenstack
MariaDB [(none)]> CREATE DATABASE neutron;
MariaDB [(none)]> GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY 'neutrondbpass';
MariaDB [(none)]> GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY 'neutrondbpass';
MariaDB [(none)]> exit;

[root@controller ~]# cat adminrc 

[root@controller ~]# . adminrc 

[root@controller ~]# openstack user create --domain default --password-prompt neutron

[root@controller ~]# openstack role add --project service --user neutron admin

[root@controller ~]# openstack service create --name neutron --description "OpenStack Networking" network

[root@controller ~]# openstack endpoint create --region RegionOne network public http://192.168.56.101:9696

[root@controller ~]# openstack endpoint create --region RegionOne network internal http://192.168.56.101:9696

[root@controller ~]# openstack endpoint create --region RegionOne network admin http://192.168.56.101:9696

[root@controller ~]# yum install openstack-neutron openstack-neutron-ml2 openstack-neutron-linuxbridge ebtables

[root@controller ~]# vi /etc/neutron/neutron.conf 
[DEFAULT]
core_plugin = ml2
service_plugins = router
allow_overlapping_ips = True
rpc_backend = rabbit
auth_strategy = keystone
notify_nova_on_port_status_changes = True
notify_nova_on_port_data_changes = True

[database]
connection = mysql+pymysql://neutron:neutrondbpass@192.168.56.101/neutron

[keystone_authtoken]
auth_uri = http://192.168.56.101:5000
auth_url = http://192.168.56.101:35357
memcached_servers = 192.168.56.101:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = neutron
password = neutronpass

[nova]
auth_url = http://192.168.56.101:35357
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = nova
password = novapass

[oslo_concurrency]
lock_path = /var/lib/neutron/tmp

[oslo_messaging_rabbit]
rabbit_host = 192.168.56.101
rabbit_userid = openstack
rabbit_password = rabbitpass
-------------------------

[root@controller ~]# vi /etc/neutron/plugins/ml2/ml2_conf.ini 
[DEFAULT]
…
[ml2]
type_drivers = flat,vlan,vxlan
tenant_network_types = vxlan
mechanism_drivers = linuxbridge,l2population
extension_drivers = port_security

[ml2_type_flat]
flat_networks = provider

[ml2_type_vxlan]
vni_ranges = 1:1000

[securitygroup]
enable_ipset = True


[root@controller ~]# vi /etc/neutron/plugins/ml2/linuxbridge_agent.ini  
[DEFAULT]
…
[linux_bridge]                              # 하이퍼바이저를 이용할 경우에는
physical_interface_mappings = provider:eth1  # eth1 대신 enp0s8을 입력합니다.

[securitygroup]
enable_security_group = True
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver

[vxlan]
enable_vxlan = True
local_ip = 192.168.56.101
l2_population = True
-------------------------


[root@controller ~]# vi /etc/neutron/l3_agent.ini 
[DEFAULT]
interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
external_network_bridge =
-------------------------


[root@controller ~]# vi /etc/neutron/dhcp_agent.ini 
[DEFAULT]
interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq
enable_isolated_metadata = True
-------------------------


[root@controller ~]# vi /etc/neutron/metadata_agent.ini 
[DEFAULT]
nova_metadata_ip = 192.168.56.101
metadata_proxy_shared_secret = metasecret001
-------------------------


[root@controller ~]# vi /etc/nova/nova.conf
…
[neutron]
url = http://192.168.56.101:9696
auth_url = http://192.168.56.101:35357
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = neutron
password = neutronpass

service_metadata_proxy = True
metadata_proxy_shared_secret = metasecret001
-------------------------

[root@controller ~]# ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini

[root@controller ~]# su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron

[root@controller ~]# systemctl restart openstack-nova-api.service

[root@controller ~]# systemctl status openstack-nova-api.service

[root@controller ~]# systemctl enable neutron-server.service neutron-linuxbridge-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service

[root@controller ~]# systemctl start neutron-server.service neutron-linuxbridge-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service

[root@controller ~]# systemctl status neutron-server.service neutron-linuxbridge-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service

[root@controller ~]# systemctl enable neutron-l3-agent.service

[root@controller ~]# systemctl start neutron-l3-agent.service

[root@controller ~]# systemctl status neutron-l3-agent.service


<컴퓨트 노드 설치 및 환경 설정>

[root@compute ~]# yum install openstack-neutron-linuxbridge ebtables ipset

[root@compute ~]# vi /etc/neutron/neutron.conf 
[DEFAULT]
rpc_backend = rabbit
auth_strategy = keystone

[keystone_authtoken]
auth_uri = http://192.168.56.101:5000
auth_url = http://192.168.56.101:35357
memcached_servers = 192.168.56.101:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = neutron
password = neutronpass

[oslo_concurrency]
lock_path = /var/lib/neutron/tmp

[oslo_messaging_rabbit]
rabbit_host = 192.168.56.101
rabbit_userid = openstack
rabbit_password = rabbitpass
-------------------------


[root@compute ~]# vi /etc/neutron/plugins/ml2/linuxbridge_agent.ini 
[DEFAULT]
…
[linux_bridge]
physical_interface_mappings = provider:eth1  # 하이퍼바이저에서는 provider:enp0s8로 입력합니다.

[securitygroup]
enable_security_group = True
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver

[vxlan]
enable_vxlan = True
local_ip = 192.168.56.102
l2_population = True
-------------------------


[root@compute ~]# vi /etc/nova/nova.conf
…
[neutron]
url = http://192.168.56.101:9696
auth_url = http://192.168.56.101:35357
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = neutron
password = neutronpass
-------------------------


[root@compute ~]# systemctl restart openstack-nova-compute.service

[root@compute ~]# systemctl status openstack-nova-compute.service

[root@compute ~]# systemctl enable neutron-linuxbridge-agent.service

[root@compute ~]# systemctl start neutron-linuxbridge-agent.service

[root@compute ~]# systemctl status neutron-linuxbridge-agent.service

[root@compute ~]# cd /var/log/neutron/

[root@compute neutron]# ll

[root@compute neutron]# cat linuxbridge-agent.log 

[root@compute ~]# sestatus

[root@compute ~]# vi /etc/sysconfig/selinux 

# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing - SELinux security policy is enforced.
#     permissive - SELinux prints warnings instead of enforcing.
#     disabled - No SELinux policy is loaded.
#SELINUX=enforcing
SELINUX=disabled
# SELINUXTYPE= can take one of three two values:
#     targeted - Targeted processes are protected,
#     minimum - Modification of targeted policy. Only selected processes are protected. 
#     mls - Multi Level Security protection.
SELINUXTYPE=targeted 
-------------------------


[root@compute ~]# systemctl start neutron-linuxbridge-agent.service

[root@compute ~]# systemctl status neutron-linuxbridge-agent.service

[root@compute ~]# ll /var/log/neutron/

[root@compute ~]# tail -f /var/log/neutron/linuxbridge-agent.log 

[root@controller ~]# cat adminrc 

[root@controller ~]# . adminrc 

[root@controller ~]# neutron ext-list

[root@controller ~]# neutron agent-list


<대시보드>

<설치 및 환경 설정>

[root@controller ~]# yum install openstack-dashboard

[root@controller ~]# vi /etc/openstack-dashboard/local_settings 
# -*- coding: utf-8 -*-
import os
from django.utils.translation import ugettext_lazy as _
from openstack_dashboard import exceptions
from openstack_dashboard.settings import HORIZON_CONFIG

DEBUG = False
TEMPLATE_DEBUG = DEBUG

# WEBROOT가 설정되어 있습니다. 
# Ubuntu에서는 기본값이 /horizon/으로 되어 있지만, 
# CentOS에서는 기본값이 /dashboard/로 설정되어 있습니다.
WEBROOT = '/dashboard/'

# 외부의 다른 노드에서 대시보드에 접속할 수 있게 ALLOWED_HOSTS를 ‘*’로 설정합니다. 
ALLOWED_HOSTS = ['*', ]

# 오픈스택 API 버전들을 설정합니다.
OPENSTACK_API_VERSIONS = {
    "identity": 3,
    "volume": 2,
    "image": 2,
}

# 오픈스택의 멀티도메인 기능을 할 수 있게 설정합니다. 
OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True

# 오픈스택 keystone의 기본 도메인을 ‘default’로 설정합니다.
OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = 'default'

LOCAL_PATH = '/tmp'

SECRET_KEY='fe2e9935dcb37e3e95de'

# Memcached 정보를 설정합니다. Memcached는 컨트롤러 노드에 설치했으므로, 
# 컨트롤러 노드의 관리용 IP와 memcached 포트를 LOCATION에 입력합니다.
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '192.168.56.101:11211',
    },
}

# 오프스택 대시보드를 실행할 컨트롤러 노드의 관리용 IP를 OPENSTACK_HOST에 설정합니다.
OPENSTACK_HOST = "192.168.56.101"
# 오픈스택 keystone URL을 설정합니다.
OPENSTACK_KEYSTONE_URL = "http://%s:5000/v3" % OPENSTACK_HOST
# 오픈스택 keystone의 기본 권한을 “user”로 설정합니다.
OPENSTACK_KEYSTONE_DEFAULT_ROLE = "user"

…

# 대시보드에서 사용 가능한 Neutron Network 기능을 설정합니다.
OPENSTACK_NEUTRON_NETWORK = {
    'enable_router': True,
    'enable_quotas': True,
    'enable_ipv6': True,
    'enable_distributed_router': True,
    'enable_ha_router': False,
    'enable_lb': False,
    'enable_firewall': False,
    'enable_vpn': True,
    'enable_fip_topology_check': True,

    'default_ipv4_subnet_pool_label': None,
    'default_ipv6_subnet_pool_label': None,
    'profile_support': None,
    'supported_provider_types': ['*'],
    'supported_vnic_types': ['*'],
}

…

# 오픈스택의 타임존을 설정합니다. 해당을 값을 통하여 대시보드에 표현될 언어가 설정됩니다.
TIME_ZONE = "Asia/Seoul"
-------------------------

[root@controller ~]# systemctl restart httpd.service memcached.service

[root@controller ~]# systemctl status httpd.service memcached.service

<테스트>

[root@controller ~]# netstat -ntpa | grep LISTEN

[root@controller ~]# iptables -L

[root@controller ~]# iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT

[root@controller ~]# iptables -L


<인스턴스 생성하기>

[root@controller ~]# cat adminrc 

[root@controller ~]# . adminrc

[root@controller ~]# cat /etc/neutron/plugin.ini | grep flat_networks

[root@controller ~]# cat /etc/neutron/plugins/ml2/linuxbridge_agent.ini | grep physical_interface_mappings

[root@controller ~]# cd /etc/sysconfig/network-scripts/

[root@controller network-scripts]# ll ifcfg*

[root@controller network-scripts]# cat ifcfg-eth1

[root@controller network-scripts]# cd

[root@controller ~]# neutron net-create --shared --provider:physical_network provider --provider:network_type flat provider

[root@controller ~]# cat /etc/resolv.conf 

[root@controller ~]# ping 210.220.163.82

[root@controller ~]# neutron subnet-create --name provider --allocation-pool start=192.168.0.100,end=192.168.0.240 --dns-nameserver 210.220.163.82 --gateway 192.168.0.1 provider 192.168.0.0/24

[root@controller ~]# ifconfig

[root@controller ~]# cat demorc 

[root@controller ~]# . demorc 

[root@controller ~]# cat /etc/neutron/plugins/ml2/ml2_conf.ini | grep tenant_network_types

[root@controller ~]# cat /etc/neutron/plugins/ml2/ml2_conf.ini | grep vni_ranges

[root@controller ~]# neutron net-create selfservice

[root@controller ~]# neutron subnet-create --name selfservice --dns-nameserver 210.220.163.82 --gateway 10.11.12.1 selfservice 10.11.12.0/24

[root@controller ~]# ifconfig

[root@controller ~]# cat adminrc 

[root@controller ~]# . adminrc 

[root@controller ~]# neutron net-update provider --router:external

[root@controller ~]# cat demorc 

[root@controller ~]# . demorc

[root@controller ~]# neutron router-create router

[root@controller ~]# neutron router-interface-add router selfservice

[root@controller ~]# neutron router-gateway-set router provider

[root@controller ~]# ip netns

[root@controller ~]# . adminrc 

[root@controller ~]# neutron router-port-list router

[root@controller ~]# ping -c 4 192.168.0.101

<flavor 생성>

[root@controller ~]# openstack flavor create --id 0 --vcpus 1 --ram 64 --disk 1 m1.nano


<Key pair 생성>

[root@controller ~]# . demorc 

[root@controller ~]# ssh-keygen -q -N ""

Enter file in which to save the key (/root/.ssh/id_rsa): /root/.ssh/openstack

[root@controller ~]# ll .ssh


<보안 그룹 룰 추가>

[root@controller ~]# openstack keypair create --public-key ~/.ssh/openstack.pub mykey

[root@controller ~]# openstack keypair list

[root@controller ~]# openstack security group rule create --proto icmp default

[root@controller ~]# openstack security group rule create --proto tcp --dst-port 22 default


<인스턴스 생성>

[root@controller ~]# . demorc 

[root@controller ~]# openstack flavor list

[root@controller ~]# openstack image list

[root@controller ~]# openstack network list

[root@controller ~]# openstack security group list

[root@controller ~]# openstack server create --flavor m1.tiny --image cirros --nic net-id=1fea0317-b4fb-4793-99b7-6af238f5d943 --security-group default --key-name mykey selfservice-instance

[root@controller ~]# openstack server list

[root@compute ~]# cat /var/log/nova/nova-compute.log

[root@controller ~]# iptables -L

[root@controller ~]# iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 9696 -j ACCEPT

[root@controller ~]# iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 9292 -j ACCEPT

[root@controller ~]# iptables -L

[root@controller ~]# openstack server list

[root@controller ~]# openstack server delete selfservice-instance

[root@controller ~]# openstack server list

[root@controller ~]# openstack server create --flavor m1.tiny --image cirros --nic net-id=1fea0317-b4fb-4793-99b7-6af238f5d943 --security-group default --key-name mykey first_instance

[root@controller ~]# openstack server list

[root@compute ~]# tail -f /var/log/nova/nova-compute.log 

[root@controller ~]# vi /etc/sysconfig/iptables

[root@controller ~]# systemctl restart iptables

[root@controller ~]# iptables -L

[root@controller ~]# openstack server create --flavor m1.tiny --image cirros --nic net-id=1fea0317-b4fb-4793-99b7-6af238f5d943 --security-group default --key-name mykey demo_instance

[root@controller ~]# openstack server list

[root@compute ~]# tail -f /var/log/nova/nova-compute.log 

[root@controller ~]# openstack console url show demo_instance

[root@controller nova]# tail -f nova-novncproxy.log 

[root@compute ~]# iptables -A IN_public_allow -p tcp -m tcp --dport 5900 -m conntrack --ctstate NEW -j ACCEPT

[root@compute ~]# iptables -L

[root@controller ~]# openstack console url show demo_instance














